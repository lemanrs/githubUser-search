{"version":3,"sources":["components/Search.js","components/Result.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","href","html_url","target","rel","src","avatar_url","alt","login","Results","results","map","key","id","App","useState","s","state","setState","apiurl","process","e","value","prevState","axios","then","data","items","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wPAgBeA,MAdf,YAA0C,IAAxBC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,OAC9B,OACC,6BACC,2BACCC,UAAU,aACVC,KAAK,OACLC,YAAY,2BACZC,SAAUL,EACVM,WAAYL,M,iBCMDM,MAdf,YAA6B,IAAXC,EAAU,EAAVA,OACd,OACI,yBAAKN,UAAU,UACX,uBAAGO,KAAOD,EAAOE,SAAUC,OAAS,SAASC,IAAI,uBACjD,yBAAKC,IAAKL,EAAOM,WAAYC,IAAI,YAEjC,yBAAKb,UAAU,UACf,yBAAKA,UAAU,QAAf,mCAEA,4BAAKM,EAAOQ,SCITC,MAZf,YAA+B,IAAZC,EAAW,EAAXA,QAClB,OACC,yBAAKhB,UAAU,WACJgB,EAAQC,KAAI,SAAAX,GAAM,OAG3B,kBAAC,EAAD,CAAQY,IAAKZ,EAAOa,GAAIb,OAAQA,SC+CrBc,MA9Cf,WAAgB,IAAD,EAEYC,mBAAS,CAClCC,EAAG,GACHN,QAAS,KAJI,mBAEPO,EAFO,KAEAC,EAFA,KAOPC,EAAM,gDAA4CF,EAAMD,EAAlD,sBAXII,uBAWJ,0BAVQA,4CAoCrB,OACC,yBAAK1B,UAAU,OACd,4BAAQA,UAAU,cACjB,wBAAIA,UAAU,SAAd,qBAED,8BACC,kBAAC,EAAD,CAAQF,YAhBS,SAAC6B,GACpB,IAAIL,EAAIK,EAAElB,OAAOmB,MAEjBJ,GAAS,SAAAK,GACR,OAAO,eAAKA,EAAZ,CAAuBP,EAAGA,QAYSvB,OA9BrB,SAAC4B,GACD,UAAVA,EAAET,KAEHY,IAAML,GAAQM,MAAK,YAAe,IAC5BzB,EAD2B,EAAX0B,KACFC,MAClBC,QAAQC,IAAI7B,GACZkB,GAAS,SAAAK,GACP,OAAO,eAAIA,EAAX,CAAsBb,QAAQV,aAwBhC,kBAAE,EAAF,CAAUU,QAASO,EAAMP,aCtCboB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjB,QAAQiB,MAAMA,EAAMC,c","file":"static/js/main.fa368594.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Search({ handleInput, search }) {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"search-box\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tplaceholder=\"Please enter username...\"\r\n\t\t\t\tonChange={handleInput}\r\n\t\t\t\tonKeyPress={search}\r\n\t\t\t></input>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react'\r\n\r\nfunction Result({ result }) {\r\n    return (\r\n        <div className=\"result\">\r\n            <a href ={result.html_url} target = \"_blank\" rel=\"noopener noreferrer\">\r\n            <img src={result.avatar_url} alt=\"avatar\" ></img>\r\n            </a>\r\n            <div className=\"middle\">\r\n            <div className='text'> Click to visit github profile</div>\r\n            </div>\r\n            <h3>{result.login}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result\r\n","import React from \"react\";\r\nimport Result from \"./Result\";\r\n\r\nfunction Results({ results }) {\r\n\treturn (\r\n\t\t<div className=\"results\">\r\n            {results.map(result => \r\n            (\r\n\r\n\t\t\t\t<Result key={result.id} result={result} />\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Results;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Seacrh from \"./components/Search\";\nimport axios from \"axios\";\nimport Results from './components/Results'\n\nconst CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\nconst CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET;\n\n\nfunction App() {\n\n\tconst [state, setState] = useState({\n\t\ts: \"\",\n\t\tresults: []\n  });\n\n  const apiurl = `https://api.github.com/search/users?q=${state.s}&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`\n  \n  const search = (e) => {\n    if(e.key === \"Enter\"){\n\n      axios(apiurl).then(({ data }) => {\n        let result = data.items;\n        console.log(result);\n        setState(prevState => {\n          return {...prevState, results:result}\n        })\n      });\n\n    }\n  }\n\n\tconst handleInput = (e) => {\n\t\tlet s = e.target.value;\n\n\t\tsetState(prevState => {\n\t\t\treturn { ...prevState, s: s };\n\t\t});\n  };\n  \n\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<h1 className=\"title\"> Github Database</h1>\n\t\t\t</header>\n\t\t\t<main >\n\t\t\t\t<Seacrh handleInput={handleInput} search={search} />\n        < Results results={state.results} />\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}